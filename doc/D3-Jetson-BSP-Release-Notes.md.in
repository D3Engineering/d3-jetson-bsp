---
x-note: @configure_input@
title: D3 Jetson BSP v@VERSION_NAME@ Release Notes
linkcolor: black
toc: true
toc-title: \empty
toc-own-page: true
listings-no-page-break: true
titlepage: true
header-includes: |
 \usepackage{booktabs}
 \usepackage{graphicx}
 \usepackage{textcomp}
 \usepackage[table]{xcolor}
 \usepackage{graphicx}
 \usepackage{caption}
 \usepackage{titling}
 \usepackage{transparent}
 \usepackage{float}
 \usepackage{array}

 \usepackage{pifont,mdframed}
 \newenvironment{warning}
  {\par\begin{mdframed}[nobreak=true,linewidth=2pt,linecolor=red]%
    \begin{list}{}{\leftmargin=1cm
                   \labelwidth=\leftmargin}\item[\Large\ding{43}]}
  {\end{list}\end{mdframed}\par}
 \newenvironment{notice}
  {\par\begin{mdframed}[nobreak=true,linewidth=2pt,linecolor=black]%
    \begin{list}{}{\leftmargin=1cm
                   \labelwidth=\leftmargin}\item[\ding{43}]}
  {\end{list}\end{mdframed}\par}
---
\lstset{
    language=bash,
    breaklines=true,
}


\renewcommand{\thempfootnote}{\arabic{mpfootnote}}

\makeatletter
\renewcommand{\fps@figure}{!ht}
\renewcommand{\fps@table}{!ht}
\makeatother

\newcommand{\imx}{D3CM-IMX390{} }
\newcommand{\imxrcm}{D3RCM-IMX390-953{} }
\newcommand{\ov}{D3RCM-OV10640-953{} }
\newcommand{\ovnone}{OV10640 }
\newcommand{\ovnones}{OV10640s }
\newcommand{\imxnone}{IMX390 }
\newcommand{\imxrcmnone}{IMX390RCM }
\newcommand{\velocity}{Velocity }
\newcommand{\discovery}{Discovery }
\newcommand{\dcvelocity}{\designcore \velocity}
\newcommand{\dcdiscovery}{\designcore \discovery}
\newcommand{\nvidia}{NVIDIA\textregistered{} }
\newcommand{\nvjetsonntm}{\nvidia Jetson }
\newcommand{\nvjetson}{\nvjetsonntm\texttrademark{} }
\newcommand{\nvxavier}{\nvjetsonntm AGX XAVIER\texttrademark{} }
\newcommand{\nvxavierntm}{\nvjetsonntm AGX XAVIER }
\newcommand{\nvnx}{XAVIER\texttrademark{} NX }
\newcommand{\nvorin}{\nvjetsonntm AGX Orin\texttrademark{} }
\newcommand{\nvorinntm}{\nvjetsonntm AGX Orin }

\newcommand{\gmslshort}{GMSL2\texttrademark{} }
\newcommand{\gmsllong}{Gigabit Multimedia Serial Link\texttrademark{} 2 }
\newcommand{\fpdlink}{FPD-Link\texttrademark{} III{} }
\newcommand{\designcore}{DesignCore\textregistered{} }

\newcommand{\rspnamelong}{\designcore{} RSP-TX2 Development Kit - \fpdlink{} }
\newcommand{\rspnameshort}{RSP-TX2 Development Kit - \fpdlink{} }

\newcommand{\cicnamelong}{\designcore \nvjetsonntm SerDes Sensor Interface Card{} }
\newcommand{\cicnameshort}{\nvjetson SerDes Sensor Interface Card{} }

\newcommand{\dbloctonamelong}{\designcore \nvxavierntm \fpdlink Interface Card{} }
\newcommand{\dbloctonameshort}{\nvxavier \fpdlink Interface Card{} }
\newcommand{\nxcnameshort}{D3 NX Carrier Board{} }
\newcommand{\nxcnamelong}{\designcore \nvjetsonntm \nvnx 12-Camera Carrier Board{} }
\newcommand{\sdkmanager}{\nvidia SDK Manager{} }

\newcommand{\nvjetpack}{NVIDIA JetPack\texttrademark{} }

\listoffigures
\listoftables

# D3 Jetson BSP v@VERSION_NAME@

D3 Jetson BSP releases can be downloaded from our GitHub
[here](https://github.com/D3Engineering/d3-jetson-bsp/releases). Everything
necessary for prototyping is already packaged for your convenience. We do not
recommend manually compiling unless you are modifying the BSP's source code.

This release supports and requires \nvjetpack @JP_VERSION@. It contains
numerous D3 bug fixes and improvements. Please note the known issues outlined
below.

\begin{warning}

There are some intermittent issues when starting camera streams, which are known issues
\hyperlink{OP-2242}{OP-2242} and \hyperlink{OP-3461}{OP-3461}. More
background information and workarounds are available in the Known Issues section.

\end{warning}

\begin{notice}

Each camera must be explicitly configured before it is used. We have
provided a terminal utility for this purpose. Please see
\hyperlink{selecting-camera-type}{Selecting Camera Type} for more
information.

\end{notice}


# Major Changes

* Support for \nxcnameshort

* Support for \nvxavier with \dbloctonameshort

* Support for \fpdlink \dcvelocity camera modules

* Support for \fpdlink \dcdiscovery camera modules

* ISP tuning files for each supported camera module


# Supported Hardware

This release supports a variety of hardware combinations. They are described in the tables that follow.

\begin{table}[h]
\begin{minipage}{\textwidth}
\centering
\caption{Supported \fpdlink Hardware Combinations}
\label{tab:supported-fpdlink-camera-modules}
\begin{tabular}{@{}p{0.5\textwidth}llll@{}}
\toprule

Hardware Combination & \ovnone & \imxnone & \velocity & \discovery \\

\midrule

\nvorin Developer Kit with \cicnamelong \\ (SKU: 1001790)
&  4 & 4 & 4 & 4 \\

\midrule

\nvxavier Developer Kit with \cicnamelong \\ (SKU: 1001790) & 4 & 4 & 4 & 4 \\

\midrule

\nxcnamelong \\ (SKU: 1001211, 1001744) & 12 & 12 & 12 & 12 \\

\bottomrule
\end{tabular}
\end{minipage}
\end{table}

\begin{table}[H]
\centering
\caption{Supported Camera Modules}
\label{tab:supported-camera-modules}
\resizebox{\textwidth}{!}{%
\begin{tabular}{@{}lll@{}}
\toprule
Model & Image Sensor & SKU \\ \midrule
\designcore \imx & SONY\textregistered{} IMX390 & 1000406 \\
\designcore \imxrcm Rugged & SONY\textregistered{} IMX390 & 1000843, 1000844 \\
\designcore \ov Rugged & OmniVision Technologies OV10640 & 1000581, 1000508 \\
\dcvelocity & onsemi AR0234 & See Table \ref{tab:supported-velocity-modules} \\
\dcdiscovery & SONY\textregistered{} IMX390 & See Table \ref{tab:supported-discovery-modules} \\ \bottomrule
\end{tabular}%
}
\end{table}

## Supported Velocity Modules

These modules can be connected to any supported D3 carrier board or interface
card as long as the ports match the supported serial interface type.

\begin{table}[H]
\centering
\caption{Supported \dcvelocity Modules}
\label{tab:supported-velocity-modules}
\resizebox{\textwidth}{!}{%
\begin{tabular}{@{}llll@{}}
\toprule
SKU & Serial Interface & Lens type & FoV \\ \midrule
D3CMC68N-089-085/-S & \fpdlink & dsl369 & Medium \\
D3CMC69N-089-085/-S & \fpdlink & dsl466 & Narrow \\
D3CMC70N-089-085/-S & \fpdlink & cil220 & Wide \\
\bottomrule
\end{tabular}%
}
\end{table}

## Supported Discovery Modules

The \dcdiscovery is the latest generation of IMX390-based image sensors. IMX390
sensors previously sold by D3 are still compatible with this release. They are
enumerated in Table \ref{tab:supported-camera-modules}.

\begin{table}[H]
\centering
\caption{Supported \dcdiscovery Modules}
\label{tab:supported-discovery-modules}
\resizebox{\textwidth}{!}{%
\begin{tabular}{@{}llll@{}}
\toprule
SKU & Serial Interface & FoV \\ \midrule
D3CMC52N-106-085-S & \fpdlink & Medium \\
D3CMC67N-106-085-S & \fpdlink & Narrow \\
D3CMC68N-106-085 & \fpdlink & Medium \\
D3CMC69N-106-085 & \fpdlink & Narrow \\
D3CMC70N-106-085/-S & \fpdlink & Wide \\
\bottomrule
\end{tabular}%
}
\end{table}


\newpage
# Installation

The basic steps for installing the D3 BSP on Jetson targets is as follows:

1. Install \nvjetpack @JP_VERSION@ on your host PC.

2. Flash \nvjetpack @JP_VERSION@ to your Jetson system. For \nxcnameshort
   systems see D3-Jetson-NX-Carrier-Bringup.pdf for specifics.

3. Install the linux-image and d3-jetson-util packages on the target.

4. Flash the correct device tree (unless already performed in Step 2).


\begin{warning}
We currently advise against running \verb|apt upgrade| on development systems.
If you wish to do so, you must disable \nvidia's apt repositories. Running
\verb|apt upgrade| without doing so may cause your system to upgrade the JetPack
version and overwrite D3 BSP changes.
\end{warning}

## Installing \nvjetpack @JP_VERSION@

If the target does not already have \nvjetpack @JP_VERSION@ installed use
\sdkmanager to download and install the \nvjetpack on the host and on the
target. \sdkmanager can be downloaded
[here](https://developer.nvidia.com/nvidia-sdk-manager).

\sdkmanager must run from a native Ubuntu 20.04, 18.04, or 16.04 host
computer. Virtual machines are not currently supported by \nvidia.
Additional documentation for \sdkmanager is provided by
\nvidia on their [website](https://docs.nvidia.com/sdk-manager/index.html).

\begin{warning}
Some additional steps are required to flash the \nxcnameshort the board for
development. Flashing with \sdkmanager may result in a system that does not
boot or is not usable. Please refer to \verb|D3-Jetson-NX-Carrier-Bringup.pdf|
for the specific flashing procedure.
\end{warning}

### Flashing JetPack without SDKManager

If you would prefer, JetPack @JP_VERSION@ can be installed from the command
line without the use of \sdkmanager. These instructions are summarized from
\nvidia's [quick start
guide](https://docs.nvidia.com/jetson/archives/r34.1/DeveloperGuide/text/IN/QuickStart.html#quick-start).

1. Download the driver package and sample root filesystem for @JP_VERSION@ from
[NVIDIA](https://developer.nvidia.com/embedded/jetson-linux-r351).

2. Extract the driver package. e.g.: `tar xf ${DRIVER_PACKAGE}`

3. Extract the root filesystem inside `Linux_for_Tegra/rootfs` with root
   privileges. e.g.: `sudo tar xpf ${ROOTFS_PACKAGE}`.

4. Prepare the image to be flashed to the board by running `sudo ./apply_binaries.sh` from the `Linux_for_Tegra` directory.

5. Flash the board using `flash.sh`: `sudo ./flash.sh ${BOARD} mmcblk0p1` where
   board could be any of the types listed
   [here](https://docs.nvidia.com/jetson/archives/r34.1/DeveloperGuide/text/IN/QuickStart.html#jetson-modules-and-configurations).

\newpage
## Installing D3 Kernel and Utilities Packages {#kernel_and_utils}

Once JetPack @JP_VERSION@ is flashed on the target, the D3 Jetson kernel can be
installed from binary Debian package files (deb files). The following is
a list of the different package files, with required ones marked accordingly.
\begin{table}
\begin{center}
\begin{tabular}{ | c | m{9.3cm} | m{3.8cm} | }
\hline
Required & File & Description\\ \hline
Yes & d3-jetson-util\_@D3_JETSON_BSP_VERSION@-1\_arm64.deb & Contains all\
of the utilities of the BSP such as camera selection and the D3 supported\
camera settings. \\
\hline
Yes & linux-image-@D3_LINUX_KERNEL_TRIPLET@+@D3_JETSON_BSP_VERSION@-@CUSTOMER@+\_1\_arm64.deb\
& Contains the Linux kernel, its modules, and their corresponding files\
needed to boot a system. \\
\hline
No & linux-headers-@D3_LINUX_KERNEL_TRIPLET@+@D3_JETSON_BSP_VERSION@-@CUSTOMER@+\_1\_arm64.deb\
& Contains all the headers required to build external kernel modules. \\
\hline
No & linux-libc-dev\_1\_arm64.deb & Contains files required to build userspace\
programs. These headers are used by GNU glibc and other system libraries. \\
\hline
\end{tabular}
\end{center}
\end{table}

Perform the following steps on the target computer (the \nvjetson) to install
the D3 kernel and its supporting packages:

\begin{warning}

The default Ubuntu image from \nvidia disables installation of
documentation from packages. The first step in the installation is to
re-enable installation of documentation. This is important because D3
installs example scripts in the documentation area; without this step
the example scripts will be missing!

\end{warning}


\begin{notice}

When \verb|linux-image-@D3_LINUX_KERNEL_TRIPLET@+@D3_JETSON_BSP_VERSION@-@CUSTOMER@+\_1\_arm64.deb| is installed you will see notices that say things like the following.

\begin{quote}
Hmm. The package shipped with a symbolic link /lib/modules/@D3_LINUX_KERNEL_TRIPLET@+@D3_JETSON_BSP_VERSION@-@CUSTOMER@+/source
However, I can not read the target: No such file or directory
Therefore, I am deleting /lib/modules/@D3_LINUX_KERNEL_TRIPLET@+@D3_JETSON_BSP_VERSION@-@CUSTOMER@+/source
\end{quote}

This notice can safely be ignored.

\end{notice}

When installing
`linux-image-@D3_LINUX_KERNEL_TRIPLET@+@D3_JETSON_BSP_VERSION@-@CUSTOMER@+_1_arm64.deb`, you may
be asked "What do you want to do about modified configuration file
`kernel-img.conf`?" (see "Package configuration" image below).  Select "install
the package maintainer's version" as depicted in the image below.

\begin{figure}[h]
\caption{Kernel Package Configuration}
\centering
\includegraphics[width=\textwidth]{img/d3-kernel-maintainer.png}
\end{figure}

These steps will install the D3 kernel and D3 utilities.

```sh
# Remove this file or the example scripts will not be included!
sudo rm -f /etc/dpkg/dpkg.cfg.d/excludes

# Update package lists for dependencies
sudo apt update

# Install the kernel and D3 supporting tools
sudo apt install \
  ./linux-image-@D3_LINUX_KERNEL_TRIPLET@+@D3_JETSON_BSP_VERSION@-@CUSTOMER@+_1_arm64.deb \
  ./d3-jetson-util_@VERSION_NAME@-1_arm64.deb

# Optional (but recommended) packages
sudo apt install \
  ./linux-image-@D3_LINUX_KERNEL_TRIPLET@+@D3_JETSON_BSP_VERSION@-@CUSTOMER@+-dbg_1_arm64.deb \
  ./linux-headers-@D3_LINUX_KERNEL_TRIPLET@+@D3_JETSON_BSP_VERSION@-@CUSTOMER@+\_1\_arm64.deb \
  ./linux-libc-dev_1_arm64.deb

# Select the DTB to use for your hardware combination. See the "DTB
# File Selection" section below for more information.
sudo d3-install-dtb

# Reboot the system to use the new kernel and DTB
sudo reboot
```

### NX Carrier Board Fan Control

\hypertarget{nxfan}{\empty}
\begin{warning}
By default, the \nvnx fan curves are inverted, which could cause thermal runaway under high load. This does not apply to \nvxavier or \nvorin.
\end{warning}

D3 has provided double-inverted fan curves for the \nvnx which result in the
expected fan response as temperature increases. Please make sure to
install `d3-jetson-util` (section \ref{kernel_and_utils}) before completing
these instructions.

\begin{table}[h]
\begin{minipage}{\textwidth}
\centering
\caption{D3 fan control profiles}
\label{tab:d3-nxfan-curves}
\resizebox{\textwidth}{!}{%
\begin{tabular}{@{}ll@{}}
\toprule

Profile Name & Description \\

\midrule

d3-nxc-quiet & Keep fan speed and noise lower at the expense of higher temperatures.\\
d3-nxc-cool & Use more aggressive fan speeds to keep temperatures lower at the expense of louder operation.\\

\bottomrule
\end{tabular}%
}
\end{minipage}
\end{table}

To set the [default fan control profile](https://docs.nvidia.com/jetson/archives/r35.2.1/DeveloperGuide/text/SD/PlatformPowerAndPerformance/JetsonOrinNxSeriesAndJetsonAgxOrinSeries.html?highlight=nvfancontrol#changing-the-default-fan-profile),

1. `sudo systemctl stop nvfancontrol`
2. Edit `/etc/nvfancontrol.conf` to set `FAN_DEFAULT_PROFILE` to one of the options listed in table \ref{tab:d3-nxfan-curves}.
3. `sudo rm /var/lib/nvfancontrol/status`
4. `sudo systemctl start nvfancontrol`

## DTB File Selection

\begin{warning}

\hypertarget{dtb-file-selection}{\empty}
Installing the wrong DTB file can result in a system that will not boot. The
system can be recovered by following the steps in
\hyperlink{installing-a-dtb}{"Manually Installing a DTB from the Host"} and
choosing the correct DTB file included with the D3 BSP.  The naming convention
is: \\
\verb|CUSTOMER@-[tegra platform]-[d3 board].dtb|.
\end{warning}

\begin{table}[h]
\begin{minipage}{\textwidth}
\centering
\caption{DTB File Selection}
\label{tab:dtb-file-selection}
\begin{tabular}{@{}p{0.6\textwidth}p{0.1\textwidth}p{0.2\textwidth}@{}}
\toprule

Base System & Camera Type & DTB Filename \\
\midrule

\nvorin Developer Kit with \cicnameshort & ALL & \verb|d3-orin-6x-serdes| \\
\midrule

\nvxavier Developer Kit with \cicnameshort & ALL & \verb|d3-xavier-6x-serdes| \\
\midrule

\nxcnamelong & \fpdlink only & \verb|d3-nxc-emmc| or \verb|d3-nxc-sdcard| \\

\bottomrule
\end{tabular}
\end{minipage}
\end{table}

The `d3-install-dtb` script provides a convenient way to update the installed
DTB. Run it after `apt` completes the installation of the required packages
listed above.

Simply follow the prompts in the terminal to select the number of the desired
kernel and DTB file. See Table \ref{tab:dtb-file-selection} for more detail
about the available DTB files.


```sh
# Install the correct device tree for your board
sudo d3-install-dtb

# Restart the system
sudo reboot
```

\begin{notice}

\begin{itemize}
  \item The kernel version reported by \verb|uname -a| will not change until the
  system is restarted.

  \item The build IDs in the kernel and device tree will not change until
  the system is restarted.
\end{itemize}


\end{notice}

After rebooting, verify that the kernel is correct by running `uname -a`. You
should see output similar to the following. The timestamp in
this document may not match your output. The important thing to verify
is that the version is @D3_JETSON_BSP_VERSION@-@CUSTOMER@.


```sh
uname -a
Linux nvidia-desktop @D3_LINUX_KERNEL_TRIPLET@+@D3_JETSON_BSP_VERSION@-@CUSTOMER@+ #1 SMP PREEMPT Fri Sep 30 12:00:00 EDT 2022 aarch64 aarch64 aarch64 GNU/Linux
```


To verify that the DTB is correct, run
`cat /proc/device-tree/nvidia,dtsfilename`. You should see a file name
that is very similar to the name of the DTB that was installed. As an
example, for the \nxcnameshort you would see `d3-nxc-fpdlink.dts`. You
can also verify the build time of the device tree with
`cat /proc/device-tree/nvidia,dtbbuildtime`. The build time in this
document may not match the build time you see but should be close in time to the build time reported by `uname -a`.

\begin{notice}

The build time file is \verb|nvidia,dtbbuildtime|. It is not
\verb|nvidia,dtsbuildtime|.

\end{notice}


```sh
cat /proc/device-tree/nvidia,dtsfilename
arch/arm64/boot/dts/../../../../../../hardware/d3/d3-orin-6x-serdes.dts
cat /proc/device-tree/nvidia,dtbbuildtime
Sep 30 202212:00:00
```

As an optional step you can verify that the build ID for the device
tree matches the build ID for the kernel. This indicates that the
device tree and kernel were built from the same code base at the same
time. A new build ID is generated for every build that D3 makes.

The build ID for the kernel should match the build ID for the device
tree.


\begin{notice}
The build IDs in this document may not match the build IDs on your
system.
\end{notice}


```sh
# The kernel build ID
cat /sys/module/build_id/parameters/build_id
e2080b9d-68d4-4d37-a906-02cc1491bd39

# The device tree build ID
cat /proc/device-tree/d3,jetson-bsp-build-id
e2080b9d-68d4-4d37-a906-02cc1491bd39
```

To verify that the cameras are operational, attach 1 to 6 cameras
(depending on your hardware configuration) and then test each
individually with either `nvgstcapture`, or GStreamer.

The `nvgstcapture` utility is installed by default.

```sh
# Replace $N with a number from 0 to 5
nvgstcapture --sensor-id $N
```

## Removing the D3 Kernel and Utilities Packages

The D3 Utilities package automatically overwrites extlinux.conf on installation.
Due to this, in order to remove the package completely, one needs to manually
intervene after the standard package removal process.

The removal of the D3 kernel can be done with a standard `sudo apt remove` or,
to remove the accompanying configuration, `sudo apt purge`.

After the requisite files listed in section \ref{kernel_and_utils} are removed,
restore the original extlinux.conf, which was automatically backed up at
installation, with the command:
```bash
sudo cp /boot/extlinux/extlinux.conf- /boot/extlinux/extlinux.conf
```
After this action is performed, please inspect the configuration in order to
ensure that rebooting will not require re-flashing the SoM.

## Manually Installing a DTB from the Host

\hypertarget{installing-a-dtb}{\empty}
This section describes how to flash the correct DTB to recover a \nvjetson
system without re-flashing the device from scratch. This step is not
necessarily required for installation.

Assuming that \sdkmanager installed \nvjetpack to its default location, the
`Linux_for_Tegra` directory ($L4TDIR) on the host machine will be located at
`~/nvidia/nvidia_sdk/JetPack_@JP_VERSION@_Linux_JETSON_AGX_XAVIER/Linux_for_Tegra.`
The "JETSON\_AGX\_XAVIER" part of that file path may differ depending on
your current Jetson target. It may instead be "JETSON\_XAVIER\_NX", for
example.

Perform the following steps:

1. Change the working directory to $L4TDIR on the host computer.

1. Copy the desired \*.dtb from the D3 BSP release into
   `./kernel/dtb/`. `flash.sh` requires the DTB to be located here for
   flashing.

2. Put the target into recovery mode by holding the recovery
   button while pressing and releasing the reset button.

3. From the host computer run flash.sh with the following arguments
   `./flash.sh -k kernel-dtb -d ./kernel/dtb/$dtb-name $jetson-type mmcblk0p1`

The `$jetson-type` could be `jetson-agx-orin-devkit`,
`jetson-xavier-nx-devkit-emmc`, or `jetson-agx-xavier-devkit` to name a few.

Once the board is flashed with the correct DTB, there should be video
output and the normal D3 installation procedure can be
followed.

\newpage
# Configuration and Use

## Connecting Cameras on the 6x-SerDes Interface Card

\begin{figure}[H]
\caption{\cicnameshort Ports}
\centering
\includegraphics[width=0.5\textwidth]{img/d3-6x-serdes-ports.png}
\end{figure}

* Connect \fpdlink camera modules to ports 0 through 3 (J6-J9, red box).

* Connect \gmslshort camera modules to ports 4 and 5 (J10 and J11, blue box).

\begin{warning}
Port 5 is disabled by default. Connecting two \gmslshort modules is currently
not supported. See \hyperlink{OP-1598}{OP-1598 in known issues} for details.
\end{warning}


\begin{figure}[H]
\caption{\cicnameshort Power}
\centering
\includegraphics[width=0.5\textwidth]{img/d3-6x-serdes-power.png}
\end{figure}

* Use jumpers to select 12V on headers J13 and J14, as pictured above.

* Supply 12Vdc to **either** the barrel connector (J17)  or the blue terminals (J18).
    * The terminal furthest from the barrel connector (J17) is the ground
      terminal unless otherwise noted on the silk screen.

## Connecting Cameras on the Xavier 16x-FPDLink Interface Card

\hypertarget{connecting-dblocto}{\empty}

\begin{figure}[H]
\caption{\dbloctonameshort Ports}
\centering
\includegraphics[width=0.5\textwidth]{img/d3-xavier-16x-fpdlink-ports.png}
\end{figure}

* Connect \fpdlink camera modules to any available port.

* Supply 12Vdc to **either** the barrel connector (J18)  or the blue terminals (J19).
    * Pay close attention to the polarity printed on the silk screen if using
      the blue terminal block.

## Connecting Cameras on the Xavier NX 12x-FPDLink Carrier Board

\hypertarget{connecting-nxc}{\empty}

\begin{figure}[H]
\caption{\nxcnameshort Ports}
\label{fig:nxc-ports}
\centering
\includegraphics[width=0.5\textwidth]{img/d3-nxc-ports.png}
\end{figure}

* Connect \fpdlink camera modules to any available port. Ports are enumerated
  as shown in figure \ref{fig:nxc-ports}.

* Supply 12Vdc to the molex power connector (J4).

## Selecting Camera Type

\hypertarget{selecting-camera-type}{\empty}

For \nvorin and \nvxavier systems, a kernel parameter is used to configure the camera
type for each port. This technique makes it possible to mix and match
all D3 supported camera types on a single system.

### Camera Selection Utility

The D3 BSP comes with a camera selection tool that will automatically make
changes to the kernel parameters based on your selection. This can be accessed
by using the `d3-select-cameras-boot` script that is supplied by the
d3-jetson-util package.

The script will read the currently active device tree to find available
cameras to enable. You must install the correct device tree for your
system via `d3-install-dtb` and reboot before using the camera selection
script.

Once the main selection menu is open, you should see a list of all camera
ports available on your system. You may navigate into these using the
arrow and `<enter>` keys.

Inside the selection menu for a camera port, you will be given the option to
enable an available camera to be used on that port. Select the cameras you wish
to use via navigating with the arrow keys and selecting with `<spacebar>`.
Once you have configured the camera port, hit `<enter>` to save your selection.

Save your new configuration by moving the cursor right to select
the "Apply" button from the main menu. You will be prompted to save your
changes before they are applied.

Once saved, changes will be read by the kernel during the next boot.

### Manual Use of "active_overlays" Kernel Parameter

Kernel parameters are specified in the
`/boot/extlinux/extlinux.conf` file. This file is modified when the D3
linux-image and d3-jetson-util deb packages are installed. This file
controls which kernel is loaded along with parameters passed to the kernel.

The kernel parameter that is used for camera selection is named
`active_overlays`. This is a comma separated string that pairs camera
model names with indices that correspond to the \fpdlink input
ports of the system.


\begin{table}[h]
\begin{minipage}{\textwidth}
\centering
\caption{Camera Model Names for Active Overlays}
\label{tab:active-overlay-parameters}
\resizebox{\textwidth}{!}{%
\begin{tabular}{@{}ccccl@{}}
\toprule

Camera Name & SKU & Active Overlay Model Name\\

\midrule

\imx  & 1000406 & imx390cm\\
\imxrcm  & 1000843, 1000844 & imx390rcm\\
\ov & 1000581, 1000508 & ov10640\\
\dcvelocity & See Table \ref{tab:supported-velocity-modules} & ar0234 \\
\dcdiscovery & See Table \ref{tab:supported-discovery-modules} & imx390 \\

\bottomrule
\end{tabular}%
}
\end{minipage}
\end{table}


The following string configures the \nxcnameshort for 6 \ovnone
cameras. This argument is applied to the `APPEND` stanza in
`/boot/extlinux/extlinux.conf`.

`active_overlays=ov10640_0,ov10640_1,ov10640_2,ov10640_3,ov10640_4,ov10640_5`

The following string would configure the first port for a \dcvelocity module, the
last port an \imxrcmnone and all other ports configured for \ovnone.

`active_overlays=imx390_0,ov10640_1,ov10640_2,ov10640_3,ov10640_4,imx390rcm_5`

The following string configures the \nvxavier for 4 \ovnone
cameras. This argument is applied to the `APPEND` stanza in
`/boot/extlinux/extlinux.conf`. This string sets up the first camera
of each set of 4 cameras to be enabled. For a visual representation, see
the section \hyperlink{connecting-dblocto}{Connection to \dbloctonameshort}

`active_overlays=ov10640_0,ov10640_4,ov10640_8,ov10640_12`

This is example of a full `extlinux.conf` file configured for 6 \ovnone
camera modules. The \ovnone portion is paired with a zero based index
that corresponds to the \fpdlink input ports.

```
TIMEOUT 30
DEFAULT primary

MENU TITLE D3-NxC eMMC boot options

LABEL primary
      MENU LABEL D3 Debug Kernel
      LINUX /boot/Image
      APPEND ${cbootargs} root=/dev/mmcblk0p1 rw rootwait rootfstype=ext4 active_overlays=ov10640_0,ov10640_1,ov10640_2,ov10640_3,ov10640_4,ov10640_5

LABEL nvidia
      MENU LABEL Nvidia Kernel
      LINUX /boot/Image-nvidia
      APPEND ${cbootargs} root=/dev/mmcblk0p1 rw rootwait rootfstype=ext4
```


## ISP Configuration

The d3-jetson-util package installs ISP override parameters for each
supported camera type to improve color reproduction and lens shading.

For \dcvelocity and \dcdiscovery modules, actions must be taken to choose the
correct tuning file based on which lens the module has. All other camera
modules should apply ISP tuning by default once `d3-jetson-util` is installed.

All image sensor types use the same mechanism to determine which ISP file to
apply. Simply create a symbolic link in `/var/nvidia/nvcam/settings` with the
sensor's badge name. The naming convention is as follows:

```c
d3_<position>_<imager-name>
```

The `<position>` field is as described in the table below, and matches the
`active_overlays` parameter in *most* cases.

\begin{table}[h]
\begin{minipage}{\textwidth}
\centering
\caption{Tegra Camera Position Mapping}
\label{}
\resizebox{0.33\textwidth}{!}{%
\begin{tabular}{@{}lll@{}}
\toprule

Sensor ID & Position Field \\

\midrule

Sensors 0-3  & 0,1,2,3 \\
Sensors 4-7  & 4,5,6,7 \\
Sensors 8-11  & 8,9,A,B \\
Sensors 12-15  & C,D,E,F \\


\bottomrule
\end{tabular}%
}
\end{minipage}
\end{table}


The `imager-name` field can be any supported imager (e.g. \ovnone, \imxnone,
\imxrcmnone, etc.). For example, an \ovnone plugged into port 0
`cicnameshort would use the following badge:

```c
d3_0_ov10640
```

### Configuring ISP for Velocity and Discovery modules {#config-isp}

ISP configuration files are not automatically applied for \dcvelocity and
\dcdiscovery modules due to the variety of lens options offered. The correct
ISP file can be correlated to the camera module part number as listed in tables
\ref{tab:supported-discovery-modules} and \ref{tab:supported-velocity-modules}.
Simply create a symbolic link to the correct ISP file as described above.

For example: for a narrow \dcvelocity module in port 6, create the following symlink:
```bash
nvidia@bean:~$ cd /var/nvidia/nvcam/settings/
nvidia@bean:/var/nvidia/nvcam/settings$ sudo ln -s ar0234velocity_narrow.isp d3_6_ar0234.isp
```

### d3-select-isp

`d3-select-isp` is an experimental script to automate the process described in
section \ref{config-isp}. The script reads camera EEPROMs, if present, and
automatically creates symlinks to the correct lens-specific tuning file that
matches the module part number read from EEPROM. Simply run it from a terminal
as follows:

```bash
nvidia@bean:~$ sudo d3-select-isp
```

Use the `--help` option for a list of accepted command line options.

### Bypass Mode
After streaming with Argus (`nvarguscamerasrc`, `argus_camera`, `nvgstcapture`, etc.),
streaming frames from V4L2 will no longer work.  Adding `bypass_mode=0`
to the command line flags, as shown in the example given below will allow
streaming frames through V4L2 again. Alternately, rebooting the system has the
same effect.

```sh
v4l2-ctl --set-ctrl bypass_mode=0
```

## OV10640

\begin{warning}

There is a known, intermittent issue affecting the OV10640 in linear mode.
See \hyperlink{OP-2242}{OP-2242} under Known Issues for more information and a workaround.

\end{warning}

This release includes two sensor modes for \ovnones. Mode 0 uses the
long exposure of the camera. This mode operates at 30 fps and delivers
12 bits-per-pixel of depth at a resolution of 1280x1080. Mode 1 uses three
exposures in order to form a single HDR mode capture, also running at 30 fps
at a resolution of 1280x1080. Below is a table of modes for the \ovnone.

\begin{table}[h]
\begin{minipage}{\textwidth}
\centering
\caption{\ovnone Sensor Modes}
\label{tab:ov10640-modes}
\begin{tabular}{@{}ccccl@{}}
\toprule

Mode ID &  Resolution &  Bit Depth & Frame Rate & Description\\
\midrule
0  & 1280x1080 & 12 & 30 & Linear mode \\
1  & 1280x1080 & 20 & 30 & HDR mode \\
\bottomrule
\end{tabular}
\end{minipage}
\end{table}

## IMX390-based Camera Modules

\begin{warning}

In order to use an IMX390-based camera with Argus in release @VERSION_NAME@, the patch for libnvscf.so
must be applied. See \hyperlink{OP-3151}{OP-3151} under Known Issues for more information.

\end{warning}

This release includes three sensor modes for all SONY\textregistered{}
IMX390 modules, including \dcdiscovery and legacy products.

\begin{warning}
Switching of modes for this sensor currently requires a system reboot to
guarantee register settings.
\end{warning}

\begin{table}[h]
\begin{minipage}{\textwidth}
\centering
\caption{\imxnone Sensor Modes}
\label{tab:imx390-modes}
\resizebox{\textwidth}{!}{%
\begin{tabular}{@{}ccccl@{}}
\toprule

Mode ID &  Resolution &  Bit Depth & Frame Rate & Description\\

\midrule

0  & 1936x1096 & 12 & 30 & Sub-pixel 1 low conversion linear mode (recommended) \\
1  & 1936x1096 & 12 & 30 & Sub-pixel 1 high conversion linear mode \\
2  & 1936x1096 & 12 & 30 & Sub-pixel 2 linear mode \\
3  & 1936x1096 & 20 & 30 & HDR mode \\
\bottomrule
\end{tabular}%
}
\end{minipage}
\end{table}

Construct a GStreamer pipeline to preview different modes. You must restart the system if
you choose to view a different mode with this camera at this time. You also may
need to explicitly set the desired mode before streaming using `v4l2-ctl`.

```bash
v4l2-ctl -csensor_mode=n # where n is the integer sensor mode
```

Mode 0 (sub-pixel 1 low conversion) is recommended for
most uses-cases. In low light conditions, mode 1 (sub-pixel 1 high conversion)
may be more suitable.


```sh
# View the camera in sub-pixel 1 low conversion linear mode in a window
gst-launch-1.0 nvarguscamerasrc sensor-mode=0 ! nvvidconv ! xvimagesink
```

### Alignment of Raw Captures
Raw captures from \imxnone are misaligned when using the default stride length.
Please follow the directions below to capture a correctly aligned raw capture.

To capture a correctly aligned image, use the following command:
```sh
v4l2-ctl --stream-mmap --stream-count --stream-skip=16 --stream-to=out.raw -cpreferred_stride=4096 -csensor_mode=0`
```
`cpreferred_stride` must be set to 4096. This is in **bytes**, not pixels.
To view the capture correctly, the correct **pixels** must be used, which is 2048.

## Velocity (AR0234) Camera Modules

\dcvelocity camera modules are based on the AR0234 image sensor from onsemi.
All supported variants are enumerated in table
\ref{tab:supported-velocity-modules}, including the different lens, serializer,
and sealing options. The most up-to-date information is on our website:
[www.d3engineering.com](www.d3engineering.com).

The `ar0234` driver in this release supports the following sensor modes (all linear):

\begin{table}[h]
\begin{minipage}{\textwidth}
\centering
\caption{\dcvelocity Sensor Modes}
\label{tab:velocity-modes}
\begin{tabular}{@{}ccccl@{}}
\toprule

Mode ID &  Resolution &  Bit Depth & Frame Rate & Description\\
\midrule
0  & 1920x1080 & 10 & 30 & Full HD \\
1  & 1920x1080 & 10 & 60 & Full HD \\
2  & 1920x1200 & 10 & 60 & WUXGA \\
3  & 1280x720 & 10 & 60 & WXGA \\
4  & 1280x720 & 10 & 120 & WXGA \\
5  & 640x480 & 10 & 120 & VGA @ 120 FPS \\
\bottomrule
\end{tabular}
\end{minipage}
\end{table}

\begin{notice}
Certain lenses may not cover the full sensor area in WUXGA (1920x1200) modes.
This may cause vignetting, or a darkening effect on the periphery of the image.
Consider using one of the Full HD (1920x1080) or lower resolution modes instead
if the effect is undesirable.
\end{notice}

### v4l2-ctl Streaming Example

Streaming may fail without setting the mode and resolutions explicitly.

The sensor mode can be set from `v4l2-ctl` as follows. The value of n is shown in
Table \ref{tab:velocity-modes}. For example, sensor mode 4 would be:
```bash
v4l2-ctl -csensor_mode=4 --set-fmt-video=width=1280,height=720,pixelformat=0
```

From then on, you will be able to stream with `v4l2-ctl --stream-mmap` like normal.

### Example GStreamer Pipeline

Always set the sensor mode explicitly with `v4l2-ctl` before streaming with `nvarguscamerasrc`.

For example, the following commands will stream mode 2 to a window:
```bash
v4l2-ctl -csensor_mode=2 # set mode first
gst-launch-1.0 nvarguscamerasrc sensor-mode=2 ! "video/x-raw(memory:NVMM),width=1920,height=1200,framerate=60/1" ! nvvidconv ! xvimagesink
```

## Frame Synchronization

This feature requires the installation of D3's `d3-camsync` Debian
package, which depends on `lua`. Installing `v4l-utils`
is recommended for setting various camera controls from the
shell. The `apt` package manager should resolve these dependencies automatically.

The version numbers in this example may not match the current
releases. Please contact D3 for the latest `d3-camsync` release.

```
sudo apt update
sudo apt install ./d3-camsync_1.2.1-1_arm64.deb
sudo apt install ./d3-camsync-dev_1.2.1-1_arm64.deb
sudo reboot
```

The default frame sync frequency is 10 Hz. This rate can be changed by
editing `/etc/d3-camsync/config.lua` and then running `sudo sync.lua`
for the changes to take effect. You do not need to restart the system
for changes to take effect.

```
vi /etc/d3-camsync/config.lua
sudo sync.lua
```

\begin{notice}

The camera module must also support frame synchronization for this
feature to work properly. At this time, D3 supports frame
synchronization with \ovnone

\end{notice}

\ovnone must be placed in frame sync mode which is sometimes called slave
mode. By default, the camera operates in a free-running mode at 30
frames per second. You can set this mode using the v4l2
frame_sync_enable control from your application. This can be set from
the command line using the example below.

```
v4l2-ctl -cframe_sync_enable=1
```

Each camera can be set independently. It is not necessary to enable
frame sync on every camera; only for the cameras that should be
synchronized.

# Sensor IDs

The sensor-id value, which is needed to identify cameras in software,
is assigned at run-time. The sensor-id can be determined based on the
number of cameras connected to the system and the ports they are
connected to. The sensor-id starts at 0 and increments for each camera
detected. The zeroth sensor-id is assigned to the camera on the lowest
numbered port. For example a camera connected to J2 will always have
sensor-id 0.

If the system is started with two cameras connected, one on J3 (the
second port) and another on J5 then the J3 camera would have sensor-id
0 and the J5 camera would have sensor-id 1.

# Known Issues

* The \imxnone driver does not support run-time sensor mode switching.

* The combination of \nvxavier and \cicnameshort is known to
  report a duplicate sysfs entry. This can safely be ignored and does
  not affect the system.

* Trying to stream on the \nxcnameshort with Argus with both \ovnone
  and \imxnone does not work

* OP-88: Removing d3-jetson-util requires manually editing extlinux.conf in order to
  choose which kernel to automatically boot

* OP-2235: Argus camera positions above 6 intermittently cause the Argus daemon
  to report invalid sensor placement errors. Whether streams are affected seems
  to be hit-or-miss.

* OP-2239: Streaming multiple \imxnone cameras simultaneously in Argus may
  cause sequence errors according to the Argus daemon, resulting in instability
  after streams have started. In most cases the camera still streams despite
  the sequence errors, but automated scripts may see exit codes and assume
  failure. This issue does not appear to occur when streaming one camera.

* \hypertarget{OP-2242}{OP-2242}: OV10640 streams intermittently with significant noise in linear mode.
  The stream looks very white, slightly scrambled, and appears to have
  scan lines scattered throughout. This issue has a few workarounds that should
  eliminate the noise: Stream using HDR mode instead, switch from linear to HDR
  and back to linear, or point the camera at a dark scene for a few seconds
  (e.g., putting the lens against the table, covering lens with hand).

* OP-2243: Argus camera streams occasionally time out with no video. \nvidia
  recommends staggering the start of each camera stream by at least 250 ms if
  using multiple cameras to mitigate this.

* \hypertarget{OP-3151}{OP-3151}: Argus fails to stream with IMX390 with the libnvscf.so shipped in
  the nvidia-l4t-camera package for JetPack 5.0.2. This is fixed by installing
  d3-jetson-util or applying the patch manually as specified in supplemental/README.md
  (found in the d3-jetson-bsp-src zip which is located in the BSP release zip).

* \hypertarget{OP-3461}{OP-3461}: Cameras, especially the IMX390, may occasionally fail to start streaming
  due to a timeout. This is related to an issue with Argus and we are waiting
  for a fix from NVIDIA before we can resolve this (NVbug 3831395).

* \hypertarget{OP-1598}{OP-1598}: Only one \gmslshort image sensor is supported at
  this time, and it must be connected to port 4 (J10). Port 5 (J11) is disabled
  in the device tree (surrounded by `#if 0`) but it could be included _instead
  of_ port 4 by changing `d3-6x-serdes-cam4-5.dtsi` and re-building the device
  tree. Future improvements are planned which will enable use of both ports
  simultaneously.

* \nvnx fan curves are inverted, which cause thermal runaway under high load.
  See \hyperlink{nxfan}{NX Fan Control} for a workaround.

* NVIDIA Bug 4054221: Applying ISP files prevents `argus_camera` from streaming
  with some sensors. Please try using `nvarguscamerasrc` instead until this is
  resolved.

\newpage

# Change-Log

This change-log is not exhaustive. This provides a historical
reference of the major changes made between releases.

## Major Changes 6.0.0

* \nvjetpack 5.0.2 supported and required. The base system has been
  upgraded to Ubuntu 20.04. Earlier releases were based on Ubuntu 18.04.

* The \nvorin with \cicnamelong is the **only** hardware combination supported by
  this release. It supports streaming with IMX390s and OV10640s. Support for
  other hardware will come in a future release.

* Manually cross-compiling the BSP requires Bootlin GCC version 2022.08-1, which
  can be downloaded [here](https://toolchains.bootlin.com/releases_aarch64.html).
  This is not necessary when you are using our prepackaged release zip. Once it
  is extracted, you must add it to your path:
  `export PATH=$PATH:~/Downloads/aarch64--glibc--stable-2020.08-1/bin/`

* Included a patch for libnvscf.so in d3-jetson-util package to resolve
  an issue with IMX390s not streaming in Argus.

* Removed D3 boot logo, as it is prohibitively difficult to install
  with the new UEFI bootloader.

* Resolved various issues related to opening and closing streams with the UB960.

* The \nvidia kernel display driver is now packaged in the D3 BSP.

* Updated documentation.

## Major Changes 5.0.0

* \nvjetpack 4.6.1 supported and required

* Removed support for Tx2, \imxnone 2-lane, and the VG6768 sensor

* Added support for TCv3 (Tone Curve Version 3) for \imxnone and \ovnone for improved HDR performance

* Update \imxnone drivers to disable the Safety Mechanism Pattern Generator\newline
  Please note that this changes the height for \imxnone to 1096 instead of 1100

* \ovnones have significantly faster startup times for streams to avoid Argus timeouts

* Fix issues with \ovnone strapping pins for fewer failures on cold boots

* Improve BSP Release Notes

* Refactored internal product code-names in favor of more intuitive ones

* The filesystem is now used to hold the device-tree file instead of the dedicated partition

* Fixed support for M2.M NVMe drives for the \nxcnameshort by preventing the
 3v3 power rail from falling during the boot sequence

## Major Changes 4.0.0

* JetPack 4.4 supported and required

* Support for the \nxcnameshort

* Add new hardware specific bringup documentation for \nxcnameshort

* New `d3-cam-select-boot` tool for selecting cameras

* Updated \imxnone ISP tuning file

* Added \imxrcmnone ISP tuning file

* Camera drivers updates

* Remove old example scripts from d3-jetson-util package

* Improve BSP Release Notes

* Additional hardware support (see Supported Hardware)

## Major Changes 3.0.2

* Fix to makefile related to BUILD_ID

## Major Changes 3.0.1

* Virtual channel fixes for \dbloctonameshort

## Major Changes 3.0.0

* \nvjetpack 4.3 supported and required

* Virtual Channel support
  * Up to 16 cameras on \dbloctonameshort
  * Up to 4 \fpdlink cameras on \cicnameshort

* Simplified dtb file selection on \nvxavier

* camera position for ISP overrides simplified to port index

* infinite-cam-timeout mode is enabled for Argus daemon to work out
  issue OP-627 on \nvxavier and occasional timeouts launching multiple
  \imxnone on Tx2 (issue OP-634)
